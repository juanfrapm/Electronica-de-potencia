

TaskHandle_t Medidas;

#define potenciometro 36 //O A0
#define pin_restaRS 32
#define pin_T1 12
#define pin_T2 14
#define pin_T3 26
#define pin_T4 27
#define pin_T5 25
#define pin_T6 33
#define pin_vIn 13
#define pin_vOut 34
#define pin_i 39
#define pin_iOut 35

int valorPot;

int voltajeIn;
int sumaVINdc;
int sumaVINrms;
int VINdc;
int VINrms;

int voltajeOut;
int sumaVOUTdc;
int sumaVOUTrms;
int VOUTdc;
int VOUTrms;

int corriente;
int sumaIdc;
int sumaIrms;
int Idc;
int Irms;


int sumaPeriodos;

int tant = 0;
int dt;

int aux;
int aux2;
volatile int retraso;
volatile int tiempoprueba = 0;

volatile int lectura = 0;

void IRAM_ATTR interrupcion(){ // funcion que se ejecuta con la interrupción
  if((micros() - tiempoprueba > 19900)){
  tiempoprueba = micros();
  
  int tiempoinicio = micros(); //mido en que momento comencé el período
  retraso = valorPot*(3333)/511; // calculo el tiempo que tengo que esperar dependiendo del valor del potenciómetro (3333 microsegundos equivale a pi/3)
  sumaPeriodos++; //cuento los periodos para promediar mas adelante
  while(micros() - tiempoinicio < retraso){ //Espero el tiempo correspondiente al retraso
    // por mientras uso ese tiempo para medir
    
  }; 
  digitalWrite(pin_T6, LOW);
  digitalWrite(pin_T2, HIGH); //enciendo T4
  
  while(micros() - tiempoinicio < 3333 + retraso){ //Espero el tiempo correspondiente a alfa
 // por mientras uso ese tiempo para medir
  };
  digitalWrite(pin_T2, LOW);
  digitalWrite(pin_T4, HIGH); // enciendo T2
  
  while(micros() - tiempoinicio < 6666 + retraso){ //Espero el tiempo correspondiente a alfa
  };
  digitalWrite(pin_T4, LOW);
  digitalWrite(pin_T3, HIGH); // enciendo T6
  
  
  while(micros() - tiempoinicio < 9999 + retraso){ //Espero el tiempo correspondiente a alfa
  };
  digitalWrite(pin_T3, LOW);
  digitalWrite(pin_T5, HIGH); // enciendo T4
  
  while(micros() - tiempoinicio < 13332 + retraso){ //Espero el tiempo correspondiente a alfa
  };
  digitalWrite(pin_T5, LOW);
  digitalWrite(pin_T1, HIGH); // enciendo T4
  
  while(micros() - tiempoinicio < 16665 + retraso){ //Espero el tiempo correspondiente a alfa
  };
  digitalWrite(pin_T1, LOW);
  digitalWrite(pin_T6, HIGH); // enciendo T4
  
  };
}


void setup() {
  // falta definir pines como entrada
  //WiFi.mode(WIFI_OFF);
  //WiFi.disconnect(true);
  analogReadResolution(9);
  attachInterrupt(digitalPinToInterrupt(pin_restaRS), interrupcion, FALLING);
  pinMode(pin_T1, OUTPUT);
  pinMode(pin_T2, OUTPUT);
  pinMode(pin_T3, OUTPUT);
  pinMode(pin_T4, OUTPUT);
  pinMode(pin_T5, OUTPUT);
  pinMode(pin_T6, OUTPUT);
  Serial.begin(115200);

  xTaskCreatePinnedToCore(
      loop_medidas, /* Funcion de la tarea1 */
      "Medidas", /* Nombre de la tarea */
      10000,  /* Tamaño de la pila */
      NULL,  /* Parametros de entrada */
      0,  /* Prioridad de la tarea */
      &Medidas,  /* objeto TaskHandle_t. */
      0); /* Nucleo donde se correra */
}

void loop() {
  valorPot = analogRead(potenciometro);
  //Serial.println("valor medido: " + analogRead(pin_vIn));
  
}

void loop_medidas(void * pvParameters)
{
  while(1)
  {
    dt = micros() - tant;
    if(dt > 25){
      //aux = (analogRead(pin_vIn)*68)/511; // 311 es el valor máximo que puede tomar vIn
      //sumaVINrms += aux*aux;
      
      aux = (analogRead(pin_vOut)*72.8)/511;
      sumaVOUTdc += aux;
      sumaVOUTrms += aux*aux;
        
      //Serial.println(aux);
      //aux = (analogRead(pin_vIn)*72.8)/511;
      sumaVINrms += aux*aux;
      tant = micros();
      
      

      /*
      aux = ((analogRead(pin_i))*dt)/511;
      sumaIdc += aux;
      sumaIrms += aux*aux;
      */
      
    }

    if(sumaPeriodos > 125){
    VOUTdc = sumaVOUTdc/5000;// el 2500 sale de 125 períodos * 20 milisegundos c/u = 5 segundos

    VINrms = 2*sumaVINrms*25/250000;
    VOUTrms = sumaVOUTrms*25/250000;
    VOUTdc = sumaVOUTdc*25/250000;
    Serial.println("Vodc = " + VOUTdc);
    Serial.println("Vorms = " + VOUTdc);
    //Serial.println("VINrms = " + VINrms);
    //Serial.println(Irms);

    sumaVOUTdc = 0;
    sumaVINrms = 0;
    sumaVOUTrms = 0;
    sumaPeriodos = 0;
    
  }
 }
}
